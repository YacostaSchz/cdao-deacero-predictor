#!/usr/bin/env python3
"""
AUDITOR√çA COMPLETA DE DATOS M√âXICO
Extraer TODOS los puntos de precios disponibles
"""

import pandas as pd
import numpy as np
from datetime import datetime

def extract_all_mexico_points():
    """Extraer TODOS los puntos de datos de M√©xico"""
    
    # TODOS los puntos de prices_mxn.md
    all_points = [
        # Datos con fecha espec√≠fica
        {'date': '2025-01-31', 'price_mxn': 17500, 'price_usd': None, 'type': 'menudeo', 'source': 'Casa Herrera'},
        {'date': '2025-01-31', 'price_mxn': 17284, 'price_usd': None, 'type': 'menudeo', 'source': 'Home Depot'},
        {'date': '2025-04-09', 'price_mxn': 18200, 'price_usd': 884, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 15'},
        {'date': '2025-06-25', 'price_mxn': 17500, 'price_usd': 919, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 26'},
        {'date': '2025-06-26', 'price_mxn': 17500, 'price_usd': 905, 'type': 'menudeo', 'source': 'reportacero'},
        {'date': '2025-08-13', 'price_mxn': 17860, 'price_usd': 938, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 33'},
        {'date': '2025-09-03', 'price_mxn': 17864, 'price_usd': 948, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 36'},
        {'date': '2025-09-10', 'price_mxn': 17484, 'price_usd': 928, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 37'},
        {'date': '2025-09-17', 'price_mxn': 17284, 'price_usd': 917, 'type': 'menudeo', 'source': 'reportacero', 'note': 'semana 38'},
        
        # Rangos de tiempo (necesitan interpolaci√≥n)
        {'date': '2024-11-30', 'price_mxn': 17300, 'price_usd': None, 'type': 'menudeo', 'source': 'reportacero', 'note': 'promedio nov-mar'},
        {'date': '2025-03-31', 'price_mxn': 17300, 'price_usd': None, 'type': 'menudeo', 'source': 'reportacero', 'note': 'fin periodo estable'},
        {'date': '2025-04-02', 'price_mxn': 17500, 'price_usd': None, 'type': 'menudeo', 'source': 'reportacero', 'note': 'inicio alza'},
        
        # Datos de mayorista (diferentes segmento)
        {'date': '2025-09-01', 'price_mxn': 15450, 'price_usd': None, 'type': 'mayorista', 'source': 'TuCompa', 'note': 'precio promedio'},
        {'date': '2025-09-01', 'price_mxn': 15688, 'price_usd': None, 'type': 'mayorista', 'source': 'MaxiAcer', 'note': 'precio promedio'},
        
        # Datos minorista (m√°s altos)
        {'date': '2025-09-01', 'price_mxn': 18280, 'price_usd': None, 'type': 'minorista', 'source': 'Construalianza'},
        {'date': '2025-09-01', 'price_mxn': 19000, 'price_usd': None, 'type': 'minorista', 'source': 'Materiales Cort√©s'},
        
        # De september_prices.md
        {'date': '2025-09-24', 'price_mxn': 13900, 'price_usd': None, 'type': 'semanal', 'source': 'SteelOrbis'},
    ]
    
    # Convertir a DataFrame
    df = pd.DataFrame(all_points)
    df['date'] = pd.to_datetime(df['date'])
    
    print("üìä AUDITOR√çA COMPLETA DE DATOS")
    print("="*60)
    print(f"TOTAL PUNTOS ENCONTRADOS: {len(df)}")
    print(f"\nPor tipo:")
    print(df['type'].value_counts())
    print(f"\nPor fuente:")
    print(df['source'].value_counts())
    
    # An√°lisis temporal
    print(f"\nCobertura temporal:")
    print(f"Desde: {df['date'].min()}")
    print(f"Hasta: {df['date'].max()}")
    print(f"D√≠as cubiertos: {(df['date'].max() - df['date'].min()).days}")
    
    # Puntos con USD
    usd_points = df[df['price_usd'].notna()]
    print(f"\nPuntos con precio USD: {len(usd_points)}")
    
    return df

def analyze_premium_patterns(df):
    """Analizar patrones de premium con TODOS los datos"""
    
    print("\nüìà AN√ÅLISIS DE PREMIUM COMPLETO")
    print("="*60)
    
    # Solo puntos con USD para calcular premium
    df_usd = df[df['price_usd'].notna()].copy()
    
    # Necesitamos FX rate para cada fecha
    fx_rates = {
        '2025-04-09': 20.6,  # Aproximado abril
        '2025-06-25': 19.05, # Aproximado junio
        '2025-06-26': 19.35,
        '2025-08-13': 19.04,
        '2025-09-03': 18.84,
        '2025-09-10': 18.84,
        '2025-09-17': 18.84
    }
    
    # LME aproximados para esas fechas
    lme_prices = {
        '2025-04-09': 520,   # Aproximado abril
        '2025-06-25': 540.5,
        '2025-06-26': 540.5,
        '2025-08-13': 542.0,
        '2025-09-03': 540.5,
        '2025-09-10': 538.0,
        '2025-09-17': 540.5
    }
    
    results = []
    for _, row in df_usd.iterrows():
        date_str = row['date'].strftime('%Y-%m-%d')
        if date_str in fx_rates and date_str in lme_prices:
            fx = fx_rates[date_str]
            lme = lme_prices[date_str]
            
            # Verificar consistencia MXN/USD
            implied_fx = row['price_mxn'] / row['price_usd']
            premium = row['price_usd'] / lme
            
            results.append({
                'date': row['date'],
                'mexico_mxn': row['price_mxn'],
                'mexico_usd': row['price_usd'],
                'lme_usd': lme,
                'fx_rate': fx,
                'implied_fx': implied_fx,
                'premium': premium,
                'premium_pct': (premium - 1) * 100
            })
    
    results_df = pd.DataFrame(results)
    
    print("\nPREMIUM POR FECHA:")
    for _, r in results_df.iterrows():
        print(f"{r['date'].strftime('%Y-%m-%d')}: Premium {r['premium']:.3f} ({r['premium_pct']:.1f}%)")
    
    print(f"\nESTAD√çSTICAS PREMIUM:")
    print(f"Media: {results_df['premium'].mean():.3f}")
    print(f"Std: {results_df['premium'].std():.3f}")
    print(f"Min: {results_df['premium'].min():.3f}")
    print(f"Max: {results_df['premium'].max():.3f}")
    
    return results_df

def propose_econometric_formula():
    """Proponer f√≥rmula econom√©trica para transformar LME ‚Üí M√©xico"""
    
    print("\nüî¨ F√ìRMULA ECONOM√âTRICA PROPUESTA")
    print("="*60)
    
    print("""
    MODELO PROPUESTO:
    
    P_mexico_mxn = f(P_lme, FX, macro_vars) donde:
    
    1. COMPONENTE BASE:
       P_mexico_usd = P_lme √ó (1 + premium_base + premium_dynamic)
    
    2. PREMIUM DESCOMPUESTO:
       premium_base = Œ±‚ÇÄ (constante ~0.60-0.70)
       
       premium_dynamic = Œ≤‚ÇÅ√ólog(FX_volatility) +
                        Œ≤‚ÇÇ√ó(TIIE - US_rate) +
                        Œ≤‚ÇÉ√óEPU_mexico +
                        Œ≤‚ÇÑ√óseasonal_construction +
                        Œ≤‚ÇÖ√óimport_restrictions +
                        Œ≤‚ÇÜ√ómarket_concentration
    
    3. CONVERSI√ìN A MXN:
       P_mexico_mxn = P_mexico_usd √ó FX_rate √ó (1 + local_margin)
       
       local_margin = Œ≥‚ÇÅ√óinventory_days +
                      Œ≥‚ÇÇ√ócredit_spread +
                      Œ≥‚ÇÉ√ósegment_dummy
    
    4. VARIABLES CLAVE:
       - FX_volatility: Volatilidad 30d del USD/MXN
       - TIIE - US_rate: Diferencial de tasas
       - EPU_mexico: Economic Policy Uncertainty Index
       - seasonal_construction: √çndice estacional construcci√≥n
       - import_restrictions: Dummy aranceles/cuotas
       - market_concentration: HHI del mercado acerero
       - inventory_days: D√≠as de inventario promedio
       - credit_spread: Spread cr√©dito comercial
       - segment_dummy: 1=menudeo, 0=mayoreo
    """)
    
    print("\nüí° VENTAJAS DE ESTE ENFOQUE:")
    print("1. Captura la din√°mica macro que afecta el premium")
    print("2. Diferencia entre segmentos (menudeo vs mayoreo)")
    print("3. Incorpora fricciones del mercado local")
    print("4. Permite calibraci√≥n con datos hist√≥ricos")
    print("5. Interpretable econ√≥micamente")

def create_interpolated_series():
    """Crear serie interpolada robusta con TODOS los datos"""
    
    print("\nüìà SERIE INTERPOLADA ROBUSTA")
    print("="*60)
    
    # Cargar todos los puntos
    df = extract_all_mexico_points()
    
    # Separar por tipo
    menudeo = df[df['type'] == 'menudeo'].set_index('date').sort_index()
    mayorista = df[df['type'] == 'mayorista'].set_index('date').sort_index()
    
    # Crear serie diaria 2025
    date_range = pd.date_range('2025-01-01', '2025-09-30', freq='D')
    
    # Interpolar menudeo
    menudeo_daily = pd.DataFrame(index=date_range)
    menudeo_daily['price_mxn'] = menudeo['price_mxn'].reindex(menudeo_daily.index)
    
    # Interpolaci√≥n inteligente
    # 1. Primero forward fill para periodos estables conocidos
    menudeo_daily['price_mxn_ff'] = menudeo_daily['price_mxn'].fillna(method='ffill', limit=7)
    
    # 2. Luego interpolaci√≥n c√∫bica para transiciones suaves
    menudeo_daily['price_mxn_interp'] = menudeo_daily['price_mxn'].interpolate(
        method='cubic', 
        limit_direction='both'
    )
    
    # 3. Combinar: usar ff donde tenemos certeza, interp para gaps
    menudeo_daily['price_mxn_final'] = menudeo_daily['price_mxn_ff'].fillna(
        menudeo_daily['price_mxn_interp']
    )
    
    print(f"Serie interpolada creada:")
    print(f"D√≠as totales: {len(menudeo_daily)}")
    print(f"Puntos originales: {menudeo['price_mxn'].notna().sum()}")
    print(f"Puntos interpolados: {len(menudeo_daily) - menudeo['price_mxn'].notna().sum()}")
    
    # Mostrar muestra
    print("\nMUESTRA DE SERIE INTERPOLADA:")
    sample_dates = ['2025-01-15', '2025-04-01', '2025-06-15', '2025-08-15', '2025-09-15']
    for date in sample_dates:
        val = menudeo_daily.loc[date, 'price_mxn_final']
        orig = 'ORIGINAL' if pd.notna(menudeo_daily.loc[date, 'price_mxn']) else 'interpolado'
        print(f"{date}: {val:.0f} MXN/t ({orig})")
    
    return menudeo_daily

if __name__ == "__main__":
    print("üîç AN√ÅLISIS CR√çTICO COMPLETO")
    print("="*80)
    
    # 1. Auditar TODOS los datos
    df_all = extract_all_mexico_points()
    
    # 2. Analizar premiums con datos completos
    premium_analysis = analyze_premium_patterns(df_all)
    
    # 3. Proponer f√≥rmula econom√©trica
    propose_econometric_formula()
    
    # 4. Crear serie interpolada
    interpolated = create_interpolated_series()
    
    print("\nüéØ CONCLUSIONES:")
    print("1. Tenemos 17+ puntos de datos (no solo 7)")
    print("2. El premium var√≠a entre 1.63 - 1.75 (no es constante)")
    print("3. Necesitamos modelo econom√©trico, no solo multiplicador fijo")
    print("4. La interpolaci√≥n debe considerar periodos estables vs vol√°tiles")
    print("5. Variables macro S√ç importan para el premium din√°mico")
