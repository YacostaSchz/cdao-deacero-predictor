#!/usr/bin/env python3
"""
VERIFICACI√ìN DE ORGANIZACI√ìN DE ARCHIVOS
Confirmar que todos los archivos est√°n en las carpetas correctas
"""

import os
from pathlib import Path

def verify_organization():
    """Verificar organizaci√≥n de archivos"""
    
    print("üìÅ VERIFICACI√ìN DE ORGANIZACI√ìN DE ARCHIVOS")
    print("="*80)
    
    base_path = Path(".")
    
    # Estructura esperada
    expected_structure = {
        "01_baseline_analysis": {
            "purpose": "An√°lisis exploratorio inicial",
            "key_files": ["temporal_audit_analyzer.py", "TEMPORAL_AUDIT_REPORT.md"]
        },
        "02_premium_models": {
            "purpose": "An√°lisis de premium M√©xico/LME",
            "key_files": ["focused_2025_model.py", "SIMPLE_PREMIUM_ANALYSIS.py", 
                         "COMPLETE_DATA_AUDIT.py", "PREMIUM_VALIDATION_FRAMEWORK.py"]
        },
        "03_comprehensive_analysis": {
            "purpose": "Feature engineering robusto",
            "key_files": ["robust_feature_pipeline.py", "ROBUST_FEATURE_STRATEGY.md"]
        },
        "05_final_models": {
            "purpose": "Modelo final de producci√≥n",
            "key_files": ["TWO_STAGE_FINAL_MODEL.py", "OVERFITTING_VALIDATION.py", 
                         "TWO_STAGE_MODEL_SUMMARY.md"]
        },
        "archives": {
            "purpose": "An√°lisis hist√≥ricos",
            "key_files": ["FINAL_CONSOLIDATED_MODEL.py", "PREMIUM_DEFINITION_VERIFICATION.py",
                         "FILE_ORGANIZATION_PLAN.md"]
        },
        "outputs": {
            "purpose": "Datasets y modelos entrenados",
            "key_files": ["TWO_STAGE_MODEL.pkl", "features_dataset_latest.csv",
                         "overfitting_validation_report.json"]
        }
    }
    
    # Verificar cada carpeta
    all_good = True
    
    for folder, info in expected_structure.items():
        folder_path = base_path / folder
        
        print(f"\nüìÇ {folder}/")
        print(f"   Prop√≥sito: {info['purpose']}")
        
        if folder_path.exists():
            print(f"   ‚úÖ Carpeta existe")
            
            # Verificar archivos clave
            existing_files = [f.name for f in folder_path.iterdir() if f.is_file()]
            
            for key_file in info['key_files']:
                if key_file in existing_files:
                    print(f"   ‚úÖ {key_file}")
                else:
                    print(f"   ‚ùå {key_file} - FALTANTE")
                    all_good = False
            
            # Mostrar archivos adicionales
            additional = [f for f in existing_files if f not in info['key_files']]
            if additional:
                print(f"   üìÑ Archivos adicionales: {len(additional)}")
                for f in additional[:3]:  # Mostrar solo primeros 3
                    print(f"      - {f}")
                if len(additional) > 3:
                    print(f"      - ... y {len(additional)-3} m√°s")
        else:
            print(f"   ‚ùå Carpeta NO EXISTE")
            all_good = False
    
    # Verificar archivos sueltos en ra√≠z
    print(f"\nüìÑ ARCHIVOS EN RA√çZ:")
    root_files = [f.name for f in base_path.iterdir() if f.is_file() and f.suffix == '.py']
    
    if root_files:
        print(f"   ‚ö†Ô∏è Archivos Python sueltos: {len(root_files)}")
        for f in root_files:
            print(f"      - {f}")
        all_good = False
    else:
        print(f"   ‚úÖ Sin archivos Python sueltos")
    
    # Resumen final
    print(f"\n\nüéØ RESUMEN DE ORGANIZACI√ìN")
    print("="*60)
    
    if all_good:
        print("‚úÖ ORGANIZACI√ìN PERFECTA")
        print("   - Todas las carpetas existen")
        print("   - Archivos clave en su lugar")
        print("   - Sin archivos sueltos")
    else:
        print("‚ö†Ô∏è ORGANIZACI√ìN INCOMPLETA")
        print("   - Revisar archivos faltantes arriba")
        print("   - Mover archivos sueltos a carpetas apropiadas")
    
    return all_good

def show_production_guide():
    """Mostrar gu√≠a para usar archivos de producci√≥n"""
    
    print(f"\n\nüöÄ GU√çA DE ARCHIVOS PARA PRODUCCI√ìN")
    print("="*70)
    
    production_files = {
        "MODELO PRINCIPAL": {
            "file": "05_final_models/TWO_STAGE_FINAL_MODEL.py",
            "description": "Modelo de dos etapas para producci√≥n",
            "output": "outputs/TWO_STAGE_MODEL.pkl"
        },
        "VALIDACI√ìN": {
            "file": "05_final_models/OVERFITTING_VALIDATION.py", 
            "description": "Validaci√≥n de overfitting (4 tests)",
            "output": "outputs/overfitting_validation_report.json"
        },
        "DOCUMENTACI√ìN": {
            "file": "05_final_models/TWO_STAGE_MODEL_SUMMARY.md",
            "description": "Resumen ejecutivo completo",
            "output": "Documentaci√≥n t√©cnica"
        },
        "DATASET": {
            "file": "outputs/features_dataset_latest.csv",
            "description": "Features completas 2025 (271 obs)",
            "output": "Input para entrenamiento"
        }
    }
    
    for category, info in production_files.items():
        print(f"\nüéØ {category}:")
        print(f"   Archivo: {info['file']}")
        print(f"   Descripci√≥n: {info['description']}")
        print(f"   Output: {info['output']}")
    
    print(f"\nüìã COMANDOS PARA PRODUCCI√ìN:")
    print("```bash")
    print("# 1. Entrenar modelo final")
    print("cd 05_final_models/")
    print("python TWO_STAGE_FINAL_MODEL.py")
    print("")
    print("# 2. Validar overfitting")
    print("python OVERFITTING_VALIDATION.py")
    print("")
    print("# 3. Implementar API")
    print("# (pr√≥ximo paso)")
    print("```")

if __name__ == "__main__":
    print("üîç VERIFICACI√ìN COMPLETA DE ORGANIZACI√ìN")
    print("="*80)
    
    # Verificar organizaci√≥n
    is_organized = verify_organization()
    
    # Mostrar gu√≠a de producci√≥n
    show_production_guide()
    
    if is_organized:
        print(f"\n\nüéâ ¬°ORGANIZACI√ìN COMPLETA!")
        print("   ‚úÖ Todos los archivos en su lugar")
        print("   ‚úÖ Estructura limpia y documentada")
        print("   ‚úÖ Listo para implementaci√≥n API")
    else:
        print(f"\n\n‚ö†Ô∏è ORGANIZACI√ìN PENDIENTE")
        print("   üìã Revisar archivos faltantes arriba")
        print("   üìã Completar movimientos de archivos")
